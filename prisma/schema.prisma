// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String?
  appBlueprints AppBlueprint[]
  Conversation  Conversation[]
  AuditLog      AuditLog[]
}

/// Conversation and message history for AI interactions and memory
model Conversation {
  id               Int                @id @default(autoincrement())
  user             User               @relation(fields: [userId], references: [id])
  userId           Int
  createdAt        DateTime           @default(now())
  messages         Message[]
  MemorySummary    MemorySummary[]
  MessageEmbedding MessageEmbedding[]
}

model Message {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  role           String // 'user' | 'assistant' | 'system'
  content        String
  createdAt      DateTime     @default(now())
}

/// Periodic summaries of conversation history for memory compaction
model MemorySummary {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  summary        String // Condensed summary of older messages
  updatedAt      DateTime     @updatedAt
}

/// Embeddings of each message to enable semantic retrieval
model MessageEmbedding {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  messageId      Int          @unique
  embedding      Json // stored embedding vector
  createdAt      DateTime     @default(now())
}

/// Audit trail of user actions for compliance
model AuditLog {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  action    String // e.g. 'export_data', 'delete_data'
  metadata  Json? // optional JSON payload
  timestamp DateTime @default(now())
}

/// Persisted AI-generated micro-app blueprints (templates)
model AppBlueprint {
  id          String   @id @default(cuid())
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     Int
  description String
  style       String
  blueprint   Json
  createdAt   DateTime @default(now())
}

/// Blueprints for entire micro-apps generated by the AI Studio
